/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*element\r\n无论是标签element还是textelement我们都希望转换成以下对象\r\n{\r\n  type,\r\n  props:{\r\n    xxx,\r\n    children:[]\r\n  }\r\n}\r\n*/\nfunction createElement(type, props) {\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n\n  return {\n    type: type,\n    props: _objectSpread(_objectSpread({}, props), {}, {\n      //child两种可能,一种是React.createElement,返回 object\n      //第二种就是string,纯文本\n      children: children.map(function (child) {\n        //是reactElement\n        if (_typeof(child) === 'object') {\n          return child;\n        } //是纯文本创建textElement并返回\n        else {\n            return createTextElement(child);\n          }\n      })\n    })\n  };\n} //当没有children的时候react不会包装原始值或创空数组\n//我们是为了代码简单才这么做的\n\n\nfunction createTextElement(text) {\n  return {\n    type: \"TEXT_ELEMENT\",\n    props: {\n      nodeValue: text,\n      children: []\n    }\n  };\n}\n\nvar Didact = {\n  createElement: createElement\n}; //我们希望babel把react>createElement变成Didact,就加下面的注释\n\n/** @jsx Didact.createElement */\n\nvar element = Didact.createElement(\"div\", {\n  id: \"foo\"\n}, Didact.createElement(\"a\", null, \"bar\"), Didact.createElement(\"b\", null)); // const element = Didact.createElement(\n//   \"div\",\n//   {\n//     id:\"foo\"\n//   },\n//   Didact.createElement(\n//     \"a\",\n//     null,\n//     \"bar\"\n//   ),\n//   Didact.createElement(\n//     \"b\"\n//   )\n// )\n\nconsole.log(element);\nvar container = document.getElementById('root'); // ReactDOM.render(element,container)\n\n//# sourceURL=webpack://ownReact/./index.js?");
/******/ })()
;